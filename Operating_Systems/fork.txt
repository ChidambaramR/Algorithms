Fork:
=====
	Fork copies the entire address space from the parent to the child. Modern implementations use a mechanism called Copy-On-Write
	tricks both the processes by sharing the address space by setting the read only bit. When either the parent or the child modifies
	the page, a separate copy is given to them with write bit set.

	Things shared between parent and child on a fork:
	-------------------------------------------------
	   * process credentials (real/effective/saved UIDs and GIDs)
	   * environment
	   * stack
	   * memory
	   * open file descriptors (note that the underlying file positions are
	        shared between the parent and child, which can be confusing)
	   * close-on-exec flags
	   * signal handling settings
	   * nice value
	   * scheduler class
	   * process group ID
	   * session ID
	   * current working directory
	   * root directory
	   * file mode creation mask (umask)
	   * resource limits
	   * controlling terminal

	Things that are unique to child:
	--------------------------------
	   * process ID
	   * different parent process ID
	   * Own copy of file descriptors and directory streams.
	   * process, text, data and other memory locks are NOT inherited.
	   * process times, in the tms struct
	   * resource utilizations are set to 0
	   * pending signals initialized to the empty set
	   * timers created by timer_create not inherited
	   * asynchronous input or output operations not inherited
